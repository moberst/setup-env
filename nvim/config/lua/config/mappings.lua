local wk = require("which-key")

-- " Find files using telescope

wk.register({
  ["<leader>f"] = {
    name = "+[f]ind",
    f = { "<cmd>Telescope find_files<cr>", "[f]ile search" },
    w = { "<cmd>Telescope file_browser<cr>", "file bro[w]ser" },
    b = { "<cmd>Telescope buffers<cr>", "[b]uffers" },
    g = { "<cmd>Telescope live_grep<cr>", "[g]lobal string" },
    l = { "<cmd>Telescope current_buffer_fuzzy_find<cr>", "[l]ocal string" },
    d = { "<cmd>Telescope diagnostics<cr>", "[d]iagnostics" },
    t = { "<cmd>TodoTelescope<cr>", "[t]odo" },
    c = { "<cmd>Telescope commands<cr>", "[c]ommands" },
    m = { "<cmd>Telescope media_files<cr>", "[m]edia files" },
    h = { "<cmd>Telescope help_tags<cr>", "[h]elp" },
  },
  ["<leader>r"] = {
    name = "+[R]un tests",
    r = { ":lua require('neotest').run.run(vim.fn.expand('%'))<CR>", "[r]un tests"},
    v = { ":lua require('neotest').output.open({enter = true})<CR>", "[v]iew output"},
    s = { ":lua require('neotest').summary.toggle()<CR>", "[S]ummary" },
  },
  ["<leader>d"] = {
    name = "+[D]ebug",
    R = { "<cmd>lua require'dap'.run_to_cursor()<cr>", "Run to Cursor" },
    E = { "<cmd>lua require'dapui'.eval(vim.fn.input '[Expression] > ')<cr>", "Evaluate Input" },
    C = { "<cmd>lua require'dap'.set_breakpoint(vim.fn.input '[Condition] > ')<cr>", "Conditional Breakpoint" },
    U = { "<cmd>lua require'dapui'.toggle()<cr>", "Toggle UI" },
    b = { "<cmd>lua require'dap'.step_back()<cr>", "Step Back" },
    d = { "<cmd>lua require'dap'.disconnect()<cr>", "Disconnect" },
    e = { "<cmd>lua require'dapui'.eval()<cr>", "Evaluate" },
    g = { "<cmd>lua require'dap'.session()<cr>", "Get Session" },
    h = { "<cmd>lua require'dap.ui.widgets'.hover()<cr>", "Hover Variables" },
    S = { "<cmd>lua require'dap.ui.widgets'.scopes()<cr>", "Scopes" },
    i = { "<cmd>lua require'dap'.step_into()<cr>", "Step Into" },
    o = { "<cmd>lua require'dap'.step_over()<cr>", "Step Over" },
    p = { "<cmd>lua require'dap'.pause.toggle()<cr>", "Pause" },
    q = { "<cmd>lua require'dap'.close()<cr>", "Quit" },
    r = { "<cmd>lua require'dap'.repl.toggle()<cr>", "Toggle Repl" },
    c = { "<cmd>lua require'dap'.continue()<cr>", "Start/Continue" },
    m = { "<cmd>lua require'dap-python'.test_method()<cr>", "Test Method" },
    f = { "<cmd>lua require'dap-python'.test_class()<cr>", "Test Class" },
    t = { "<cmd>lua require'dap'.toggle_breakpoint()<cr>", "Toggle Breakpoint" },
    x = { "<cmd>lua require'dap'.terminate()<cr>", "Terminate" },
    u = { "<cmd>lua require'dap'.step_out()<cr>", "Step Out" },
  },
  ["<leader>b"] = {
    name = "+[b]ufferline",
    o = { "<cmd>BufferLinePick<cr>", "[o]pen (pick)" },
    d = { "<cmd>BufferLinePickClose<cr>", "[d]elete (pick)" },
    l = { "<cmd>BufferLineMovePrev<cr>", "move (right)" },
    h = { "<cmd>BufferLineMoveNext<cr>", "move (left)" },
  },
  ["<leader>q"] = { "<cmd>call ToggleQuickfixList()<CR>", "[q]flist toggle"},
  ["["] = {
    name = "+previous",
    b = { "<cmd>BufferLineCyclePrev<cr>", "[b]uffer" },
    d = { "<cmd>lua vim.diagnostic.goto_prev()<cr>", "[d]iagnostic" },
    h = { "<cmd>Gitsigns prev_hunk<cr>", "[h]unk" },
  },
  ["]"] = {
    name = "+next",
    b = { "<cmd>BufferLineCycleNext<cr>", "[b]uffer" },
    d = { "<cmd>lua vim.diagnostic.goto_next()<cr>", "[d]iagnostic" },
    h = { "<cmd>Gitsigns next_hunk<cr>", "[h]unk" },
  },
})
